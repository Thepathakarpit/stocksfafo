version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: stocksfafo-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: stocksfafo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - stocksfafo-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: stocksfafo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stocksfafo-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stocksfafo-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/stocksfafo?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      DEFAULT_STOCK_LIST: nifty50
      LOG_LEVEL: info
      CORS_ORIGIN: http://localhost:3000
      HELMET_ENABLED: true
      COMPRESSION_ENABLED: true
      CACHE_TTL: 30000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - stocksfafo-network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stocksfafo-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - stocksfafo-network
    command: npm start

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: stocksfafo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - stocksfafo-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  stocksfafo-network:
    driver: bridge 